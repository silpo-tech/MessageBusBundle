.PHONY: help up down install build test integration unit coverage phpstan lint fix

COMPOSE_FILE := docker-compose.test.yml
COMPOSE_COMMAND := docker compose -p message-bus -f $(COMPOSE_FILE)
SKIP_INSTALL := false

# Autogenerated help:
# Use "##@" to create sections
# Use "##" after the target to describe commands
help: ## Show this help
	@awk 'BEGIN {FS = ":.*##"; printf "\n\033[1mAvailable commands:\033[0m\n\n"} \
		/^[a-zA-Z_-]+:.*?##/ { printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2 } \
		/^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0,5) } ' $(MAKEFILE_LIST)

##@ Setup:

build: ## Build Docker images for message-bus services
	$(COMPOSE_COMMAND) build

up: ## Start message-bus services
	@set -e; \
	if ! $(COMPOSE_COMMAND) ps --status=running --services | grep -qx 'api'; then \
		echo "Starting message-bus services..."; \
		$(COMPOSE_COMMAND) up -d; \
	fi;

down: ## Stop message-bus services
	$(COMPOSE_COMMAND) down -v --remove-orphans

install: up ## Install composer dependencies (use SKIP_INSTALL=true to skip in related commands)
	@set -e; \
	if [ '$(SKIP_INSTALL)' = 'true' ] || [ '$(SKIP_INSTALL)' = '1' ]; then \
		echo 'Composer installation has been skipped'; \
	else \
		$(COMPOSE_COMMAND) exec -T api /usr/local/bin/composer install --working-dir=/var/www/project -o --no-interaction --ignore-platform-reqs; \
	fi

##@ Tests:

test: install ## Run tests
	$(COMPOSE_COMMAND) exec -T api /usr/local/bin/composer test:run --working-dir=/var/www/project

integration: install ## Run integration tests
	$(COMPOSE_COMMAND) exec -T api /usr/local/bin/composer test:integration --working-dir=/var/www/project

unit: install ## Run unit tests
	$(COMPOSE_COMMAND) exec -T api /usr/local/bin/composer test:unit --working-dir=/var/www/project

coverage: install ## Run tests with coverage report
	$(COMPOSE_COMMAND) exec -T api /usr/local/bin/composer test:coverage --working-dir=/var/www/project

##@ Static Analysis:

phpstan: install ## Run phpstan
	$(COMPOSE_COMMAND) exec -T api /usr/local/bin/composer phpstan --working-dir=/var/www/project

##@ Code Quality:

lint: install ## Run linter
	$(COMPOSE_COMMAND) exec -T api /usr/local/bin/composer lint --working-dir=/var/www/project

fix: install ## Run code style fixer
	$(COMPOSE_COMMAND) exec -T api /usr/local/bin/composer lint:fix --working-dir=/var/www/project
